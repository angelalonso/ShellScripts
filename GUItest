#!/bin/bash
#
# very slow way of creating a GUI without ncurses

# Function that writes a line
fnLINE()
{
LINEWIDTH="$1"
COUNTER=0
while [ $COUNTER -lt $LINEWIDTH ] ; do
  echo -ne "-"
  COUNTER=`expr $COUNTER + 1`
done
}
# Function that fakes a GUI
fnGUI()
{
MODE=$1
COLS=$(tput cols)
clear
case $MODE in
     H) 
       fnLINE $COLS
       echo "              HELP mode                 "
       fnLINE $COLS
       echo "Sir, we need two parameters:"
       echo "  1.- A STRING to be searched"
       echo "  2.- A DOCUMENT to search in"
       fnLINE $COLS
     ;;
esac
}
# Program itself
OPCION=
echo
if [ -z $2 ] ; then
  if [ -z $1 ] ; then
    fnGUI H
    echo "None of the above indicated parameters were properly indicated"
    echo "I'm afraid, Sir, I cannot continue..."
    exit
  else
    echo "Sir, we need the following parameters:"
    echo "  1.- A STRING to be searched"
    echo "  2.- A DOCUMENT to search in"
    echo
    echo "...but you just entered one parameter. " $1
    echo "Now, how do you want us to use this parameter? (1/2)"
    echo "press 1    if you want it to be used as a STRING"
    echo "press 2    if you want it to be used as a DOCUMENT"
    until [ "$OPCION" = "1" ] || [ "$OPCION" = "2" ] ; do
      read OPCION 
      echo $OPCION
      if [ "$OPCION" != "1" ] || [ "$OPCION" != "2" ] ; then
        echo "Just press the number 1 or the number 2..." 
      fi
    done
  fi
else
STRING=$1
DOCUMENT=$2
echo
echo "Acknowledged, Sir!,"
echo 'we are going to search "'$STRING'" inside ' $DOCUMENT
echo
NRCOLS=0
NRLINES=1
while read line ; do
  NRCOLS=`awk -v a="$line" -v b="$STRING" "BEGIN { print index ( a , b ) } " `
  if [ $NRCOLS -gt 0 ] ; then
    echo "found at position "$NRLINES","$NRCOLS 
  fi
  NRLINES=`expr $NRLINES + 1`
done < "$DOCUMENT"
fi
# error handling
if [ $? -eq 0 ] ; then
echo
echo "Your command brought us once again SUCCESS, Sir!" ;
else
  echo
  echo "I'm afraid an error was encountered, Sir..."
  exit
fi
